@page "/employees2"
@inject IEmployeeService EmployeeService
@inject NavigationManager NavigationManager

<PageTitle>Employees</PageTitle>
<h3>List of Employees</h3>

<div class="row">
	<div class="col-md-6 mb-3">
		<input type="text" @bind-value="@SearchTerm" @bind-value:event="oninput" placeholder="Search by name...">
		<button class="btn btn-primary" @onclick="SearchEmployees">Search</button>
	</div>
</div>
<table class="table">
	<thead>
		<tr>
			<th>No.</th>
			<th>Id</th>
			<th>Nama</th>
			<th>Alamat</th>
			<th>Gaji</th>
			<th></th>
			<th></th>
		</tr>
	</thead>
	<tbody>
		@foreach (var employee in employees)
		{
			<tr>
				<td>@(employees.IndexOf(employee)+1)</td>
				<td>@employee.Id</td>
				<td>@employee.Nama</td>
				<td>@employee.Alamat</td>
				<td>@employee.Gaji</td>
				<td>
					<button class="btn btn-primary" @onclick="(() => ShowEmployee(employee.Id))"><i class="oi oi-pencil"></i></button>
				</td>
				<td>
					<button type="button" class="btn btn-link" @onclick="()=> DeleteEmployee(employee.Id)"><i class="oi oi-trash"></i></button>
				</td>
			</tr>
		}
	</tbody>
</table>
<button class="btn btn-primary" @onclick="CreateNewEmployee">Create New Employee</button>

@code {
	private List<Employee> employees = new List<Employee>();
	public  string SearchTerm { get; set; }

	protected override async Task OnInitializedAsync()
	{
		SearchTerm = string.Empty;
		await GetEmployees();
	}

	void ShowEmployee(int id)
	{
		NavigationManager.NavigateTo($"employee/{id}");
	}

	void CreateNewEmployee()
	{
		NavigationManager.NavigateTo($"employee");
	}

	async Task DeleteEmployee(int id)
	{
		await EmployeeService.DeleteEmployee(id);
		await GetEmployees();
	}

	async Task GetEmployees()
	{
		employees = await EmployeeService.GetEmployees();
	}

	async Task SearchEmployees()
	{
		if (string.IsNullOrWhiteSpace(SearchTerm))
		{
			await GetEmployees();
		}
		else
		{
			employees = await EmployeeService.SearchEmployees(SearchTerm);
		}
	}


}
